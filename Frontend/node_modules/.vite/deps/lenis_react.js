import {
  require_jsx_runtime
} from "./chunk-S725DACQ.js";
import {
  require_react
} from "./chunk-RLJ2RCJQ.js";
import {
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/lenis/dist/lenis-react.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@darkroom.engineering/tempus/dist/tempus.modern.mjs
var a = "undefined" != typeof window && new class {
  constructor() {
    this.raf = (a3) => {
      requestAnimationFrame(this.raf);
      const t2 = a3 - this.now;
      this.now = a3;
      for (let s2 = 0; s2 < this.callbacks.length; s2++) this.callbacks[s2].callback(a3, t2);
    }, this.callbacks = [], this.now = performance.now(), requestAnimationFrame(this.raf);
  }
  add(a3, t2 = 0) {
    return this.callbacks.push({ callback: a3, priority: t2 }), this.callbacks.sort((a4, t3) => a4.priority - t3.priority), () => this.remove(a3);
  }
  remove(a3) {
    this.callbacks = this.callbacks.filter(({ callback: t2 }) => a3 !== t2);
  }
}();

// node_modules/lenis/dist/lenis.mjs
function clamp(t2, e, i2) {
  return Math.max(t2, Math.min(e, i2));
}
var Animate = class {
  advance(t2) {
    var _a;
    if (!this.isRunning) return;
    let e = false;
    if (this.duration && this.easing) {
      this.currentTime += t2;
      const i2 = clamp(0, this.currentTime / this.duration, 1);
      e = i2 >= 1;
      const s2 = e ? 1 : this.easing(i2);
      this.value = this.from + (this.to - this.from) * s2;
    } else this.lerp ? (this.value = function damp(t3, e2, i2, s2) {
      return function lerp(t4, e3, i3) {
        return (1 - i3) * t4 + i3 * e3;
      }(t3, e2, 1 - Math.exp(-i2 * s2));
    }(this.value, this.to, 60 * this.lerp, t2), Math.round(this.value) === this.to && (this.value = this.to, e = true)) : (this.value = this.to, e = true);
    e && this.stop(), (_a = this.onUpdate) == null ? void 0 : _a.call(this, this.value, e);
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, e, { lerp: i2, duration: s2, easing: o2, onStart: n2, onUpdate: r2 }) {
    this.from = this.value = t2, this.to = e, this.lerp = i2, this.duration = s2, this.easing = o2, this.currentTime = 0, this.isRunning = true, n2 == null ? void 0 : n2(), this.onUpdate = r2;
  }
};
var Dimensions = class {
  constructor({ wrapper: t2, content: e, autoResize: i2 = true, debounce: s2 = 250 } = {}) {
    __publicField(this, "resize", () => {
      this.onWrapperResize(), this.onContentResize();
    });
    __publicField(this, "onWrapperResize", () => {
      this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    });
    __publicField(this, "onContentResize", () => {
      this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
    });
    this.wrapper = t2, this.content = e, i2 && (this.debouncedResize = /* @__PURE__ */ function debounce(t3, e2) {
      let i3;
      return function() {
        let s3 = arguments, o2 = this;
        clearTimeout(i3), i3 = setTimeout(function() {
          t3.apply(o2, s3);
        }, e2);
      };
    }(this.resize, s2), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
  }
  destroy() {
    var _a, _b;
    (_a = this.wrapperResizeObserver) == null ? void 0 : _a.disconnect(), (_b = this.contentResizeObserver) == null ? void 0 : _b.disconnect(), window.removeEventListener("resize", this.debouncedResize, false);
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t2, ...e) {
    let i2 = this.events[t2] || [];
    for (let t3 = 0, s2 = i2.length; t3 < s2; t3++) i2[t3](...e);
  }
  on(t2, e) {
    var _a;
    return ((_a = this.events[t2]) == null ? void 0 : _a.push(e)) || (this.events[t2] = [e]), () => {
      var _a2;
      this.events[t2] = (_a2 = this.events[t2]) == null ? void 0 : _a2.filter((t3) => e !== t3);
    };
  }
  off(t2, e) {
    var _a;
    this.events[t2] = (_a = this.events[t2]) == null ? void 0 : _a.filter((t3) => e !== t3);
  }
  destroy() {
    this.events = {};
  }
};
var t = 100 / 6;
var VirtualScroll = class {
  constructor(t2, { wheelMultiplier: e = 1, touchMultiplier: i2 = 1 }) {
    __publicField(this, "onTouchStart", (t2) => {
      const { clientX: e, clientY: i2 } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = e, this.touchStart.y = i2, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t2 });
    });
    __publicField(this, "onTouchMove", (t2) => {
      const { clientX: e, clientY: i2 } = t2.targetTouches ? t2.targetTouches[0] : t2, s2 = -(e - this.touchStart.x) * this.touchMultiplier, o2 = -(i2 - this.touchStart.y) * this.touchMultiplier;
      this.touchStart.x = e, this.touchStart.y = i2, this.lastDelta = { x: s2, y: o2 }, this.emitter.emit("scroll", { deltaX: s2, deltaY: o2, event: t2 });
    });
    __publicField(this, "onTouchEnd", (t2) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t2 });
    });
    __publicField(this, "onWheel", (e) => {
      let { deltaX: i2, deltaY: s2, deltaMode: o2 } = e;
      i2 *= 1 === o2 ? t : 2 === o2 ? this.windowWidth : 1, s2 *= 1 === o2 ? t : 2 === o2 ? this.windowHeight : 1, i2 *= this.wheelMultiplier, s2 *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: i2, deltaY: s2, event: e });
    });
    __publicField(this, "onWindowResize", () => {
      this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;
    });
    this.element = t2, this.wheelMultiplier = e, this.touchMultiplier = i2, this.touchStart = { x: null, y: null }, this.emitter = new Emitter(), window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: false });
  }
  on(t2, e) {
    return this.emitter.on(t2, e);
  }
  destroy() {
    this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel, { passive: false }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.removeEventListener("touchend", this.onTouchEnd, { passive: false });
  }
};
var Lenis = class {
  constructor({ wrapper: t2 = window, content: e = document.documentElement, wheelEventsTarget: i2 = t2, eventsTarget: s2 = i2, smoothWheel: o2 = true, syncTouch: n2 = false, syncTouchLerp: r2 = 0.075, touchInertiaMultiplier: l2 = 35, duration: h, easing: a3 = (t3) => Math.min(1, 1.001 - Math.pow(2, -10 * t3)), lerp: c2 = 0.1, infinite: u2 = false, orientation: d2 = "vertical", gestureOrientation: p2 = "vertical", touchMultiplier: m = 1, wheelMultiplier: v = 1, autoResize: g = true, prevent: S = false, __experimental__naiveDimensions: w = false } = {}) {
    this.__isScrolling = false, this.__isStopped = false, this.__isLocked = false, this.direction = 0, this.onVirtualScroll = ({ deltaX: t3, deltaY: e2, event: i3 }) => {
      if (i3.ctrlKey) return;
      const s3 = i3.type.includes("touch"), o3 = i3.type.includes("wheel");
      this.isTouching = "touchstart" === i3.type || "touchmove" === i3.type;
      if (this.options.syncTouch && s3 && "touchstart" === i3.type && !this.isStopped && !this.isLocked) return void this.reset();
      const n3 = 0 === t3 && 0 === e2, r3 = "vertical" === this.options.gestureOrientation && 0 === e2 || "horizontal" === this.options.gestureOrientation && 0 === t3;
      if (n3 || r3) return;
      let l3 = i3.composedPath();
      l3 = l3.slice(0, l3.indexOf(this.rootElement));
      const h2 = this.options.prevent;
      if (l3.find((t4) => {
        var e3, i4, n4, r4, l4;
        return t4 instanceof Element && (("function" == typeof h2 ? null == h2 ? void 0 : h2(t4) : h2) || (null === (e3 = t4.hasAttribute) || void 0 === e3 ? void 0 : e3.call(t4, "data-lenis-prevent")) || s3 && (null === (i4 = t4.hasAttribute) || void 0 === i4 ? void 0 : i4.call(t4, "data-lenis-prevent-touch")) || o3 && (null === (n4 = t4.hasAttribute) || void 0 === n4 ? void 0 : n4.call(t4, "data-lenis-prevent-wheel")) || (null === (r4 = t4.classList) || void 0 === r4 ? void 0 : r4.contains("lenis")) && !(null === (l4 = t4.classList) || void 0 === l4 ? void 0 : l4.contains("lenis-stopped")));
      })) return;
      if (this.isStopped || this.isLocked) return void i3.preventDefault();
      if (!(this.options.syncTouch && s3 || this.options.smoothWheel && o3)) return this.isScrolling = "native", void this.animate.stop();
      i3.preventDefault();
      let a4 = e2;
      "both" === this.options.gestureOrientation ? a4 = Math.abs(e2) > Math.abs(t3) ? e2 : t3 : "horizontal" === this.options.gestureOrientation && (a4 = t3);
      const c3 = s3 && this.options.syncTouch, u3 = s3 && "touchend" === i3.type && Math.abs(a4) > 5;
      u3 && (a4 = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + a4, Object.assign({ programmatic: false }, c3 ? { lerp: u3 ? this.options.syncTouchLerp : 1 } : { lerp: this.options.lerp, duration: this.options.duration, easing: this.options.easing }));
    }, this.onNativeScroll = () => {
      if (clearTimeout(this.__resetVelocityTimeout), delete this.__resetVelocityTimeout, this.__preventNextNativeScrollEvent) delete this.__preventNextNativeScrollEvent;
      else if (false === this.isScrolling || "native" === this.isScrolling) {
        const t3 = this.animatedScroll;
        this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity, this.velocity = this.animatedScroll - t3, this.direction = Math.sign(this.animatedScroll - t3), this.isScrolling = "native", this.emit(), 0 !== this.velocity && (this.__resetVelocityTimeout = setTimeout(() => {
          this.lastVelocity = this.velocity, this.velocity = 0, this.isScrolling = false, this.emit();
        }, 400));
      }
    }, window.lenisVersion = "1.1.3", t2 && t2 !== document.documentElement && t2 !== document.body || (t2 = window), this.options = { wrapper: t2, content: e, wheelEventsTarget: i2, eventsTarget: s2, smoothWheel: o2, syncTouch: n2, syncTouchLerp: r2, touchInertiaMultiplier: l2, duration: h, easing: a3, lerp: c2, infinite: u2, gestureOrientation: p2, orientation: d2, touchMultiplier: m, wheelMultiplier: v, autoResize: g, prevent: S, __experimental__naiveDimensions: w }, this.animate = new Animate(), this.emitter = new Emitter(), this.dimensions = new Dimensions({ wrapper: t2, content: e, autoResize: g }), this.updateClassName(), this.userData = {}, this.time = 0, this.velocity = this.lastVelocity = 0, this.isLocked = false, this.isStopped = false, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.virtualScroll = new VirtualScroll(s2, { touchMultiplier: m, wheelMultiplier: v }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.cleanUpClassName();
  }
  on(t2, e) {
    return this.emitter.on(t2, e);
  }
  off(t2, e) {
    return this.emitter.off(t2, e);
  }
  setScroll(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }
  resize() {
    this.dimensions.resize();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity = 0, this.animate.stop();
  }
  start() {
    this.isStopped && (this.isStopped = false, this.reset());
  }
  stop() {
    this.isStopped || (this.isStopped = true, this.animate.stop(), this.reset());
  }
  raf(t2) {
    const e = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * e);
  }
  scrollTo(t2, { offset: e = 0, immediate: i2 = false, lock: s2 = false, duration: o2 = this.options.duration, easing: n2 = this.options.easing, lerp: r2 = this.options.lerp, onStart: l2, onComplete: h, force: a3 = false, programmatic: c2 = true, userData: u2 = {} } = {}) {
    if (!this.isStopped && !this.isLocked || a3) {
      if ("string" == typeof t2 && ["top", "left", "start"].includes(t2)) t2 = 0;
      else if ("string" == typeof t2 && ["bottom", "right", "end"].includes(t2)) t2 = this.limit;
      else {
        let i3;
        if ("string" == typeof t2 ? i3 = document.querySelector(t2) : t2 instanceof HTMLElement && (null == t2 ? void 0 : t2.nodeType) && (i3 = t2), i3) {
          if (this.options.wrapper !== window) {
            const t3 = this.rootElement.getBoundingClientRect();
            e -= this.isHorizontal ? t3.left : t3.top;
          }
          const s3 = i3.getBoundingClientRect();
          t2 = (this.isHorizontal ? s3.left : s3.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof t2 && (t2 += e, t2 = Math.round(t2), this.options.infinite ? c2 && (this.targetScroll = this.animatedScroll = this.scroll) : t2 = clamp(0, t2, this.limit), t2 !== this.targetScroll)) {
        if (this.userData = u2, i2) return this.animatedScroll = this.targetScroll = t2, this.setScroll(this.scroll), this.reset(), this.preventNextNativeScrollEvent(), this.emit(), null == h || h(this), void (this.userData = {});
        c2 || (this.targetScroll = t2), this.animate.fromTo(this.animatedScroll, t2, { duration: o2, easing: n2, lerp: r2, onStart: () => {
          s2 && (this.isLocked = true), this.isScrolling = "smooth", null == l2 || l2(this);
        }, onUpdate: (t3, e2) => {
          this.isScrolling = "smooth", this.lastVelocity = this.velocity, this.velocity = t3 - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t3, this.setScroll(this.scroll), c2 && (this.targetScroll = t3), e2 || this.emit(), e2 && (this.reset(), this.emit(), null == h || h(this), this.userData = {}, this.preventNextNativeScrollEvent());
        } });
      }
    }
  }
  preventNextNativeScrollEvent() {
    this.__preventNextNativeScrollEvent = true, requestAnimationFrame(() => {
      delete this.__preventNextNativeScrollEvent;
    });
  }
  get rootElement() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }
  get limit() {
    return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }
  get isHorizontal() {
    return "horizontal" === this.options.orientation;
  }
  get actualScroll() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite ? function modulo(t2, e) {
      return (t2 % e + e) % e;
    }(this.animatedScroll, this.limit) : this.animatedScroll;
  }
  get progress() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }
  get isScrolling() {
    return this.__isScrolling;
  }
  set isScrolling(t2) {
    this.__isScrolling !== t2 && (this.__isScrolling = t2, this.updateClassName());
  }
  get isStopped() {
    return this.__isStopped;
  }
  set isStopped(t2) {
    this.__isStopped !== t2 && (this.__isStopped = t2, this.updateClassName());
  }
  get isLocked() {
    return this.__isLocked;
  }
  set isLocked(t2) {
    this.__isLocked !== t2 && (this.__isLocked = t2, this.updateClassName());
  }
  get isSmooth() {
    return "smooth" === this.isScrolling;
  }
  get className() {
    let t2 = "lenis";
    return this.isStopped && (t2 += " lenis-stopped"), this.isLocked && (t2 += " lenis-locked"), this.isScrolling && (t2 += " lenis-scrolling"), "smooth" === this.isScrolling && (t2 += " lenis-smooth"), t2;
  }
  updateClassName() {
    this.cleanUpClassName(), this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();
  }
  cleanUpClassName() {
    this.rootElement.className = this.rootElement.className.replace(/lenis(-\w+)?/g, "").trim();
  }
};

// node_modules/lenis/dist/lenis-react.mjs
var import_react = __toESM(require_react(), 1);
var f = (0, import_react.createContext)(null);
var p = new class Store {
  constructor(r2) {
    this.listeners = [], this.state = r2;
  }
  set(r2) {
    this.state = r2;
    for (let r3 of this.listeners) r3(this.state);
  }
  subscribe(r2) {
    return this.listeners = [...this.listeners, r2], () => {
      this.listeners = this.listeners.filter((e) => e !== r2);
    };
  }
  get() {
    return this.state;
  }
}({});
function useCurrentLenis() {
  const r2 = (0, import_react.useContext)(f), e = function useStore(r3) {
    const [e2, t2] = (0, import_react.useState)(r3.get());
    return (0, import_react.useEffect)(() => r3.subscribe((r4) => t2(r4)), [r3]), e2;
  }(p);
  return null != r2 ? r2 : e;
}
function useLenis(r2, e = [], t2 = 0) {
  const { lenis: n2, addCallback: i2, removeCallback: o2 } = useCurrentLenis();
  return (0, import_react.useEffect)(() => {
    if (r2 && i2 && o2 && n2) return i2(r2, t2), r2(n2), () => {
      o2(r2);
    };
  }, [n2, i2, o2, t2, ...e]), n2;
}
var d = (0, import_react.forwardRef)((i2, o2) => {
  var { children: u2, root: d2 = false, options: b = {}, autoRaf: m = true, rafPriority: h = 0, className: y } = i2, v = function __rest(r2, e) {
    var t2 = {};
    for (var n2 in r2) Object.prototype.hasOwnProperty.call(r2, n2) && e.indexOf(n2) < 0 && (t2[n2] = r2[n2]);
    if (null != r2 && "function" == typeof Object.getOwnPropertySymbols) {
      var s2 = 0;
      for (n2 = Object.getOwnPropertySymbols(r2); s2 < n2.length; s2++) e.indexOf(n2[s2]) < 0 && Object.prototype.propertyIsEnumerable.call(r2, n2[s2]) && (t2[n2[s2]] = r2[n2[s2]]);
    }
    return t2;
  }(i2, ["children", "root", "options", "autoRaf", "rafPriority", "className"]);
  const O = (0, import_react.useRef)(null), g = (0, import_react.useRef)(null), [k, j] = (0, import_react.useState)(void 0), C = (0, import_react.useRef)([]), w = (0, import_react.useCallback)((r2, e) => {
    C.current.push({ callback: r2, priority: e }), C.current.sort((r3, e2) => r3.priority - e2.priority);
  }, []), S = (0, import_react.useCallback)((r2) => {
    C.current = C.current.filter((e) => e.callback !== r2);
  }, []);
  (0, import_react.useImperativeHandle)(o2, () => ({ wrapper: O.current, content: g.current, lenis: k }), [k]), (0, import_react.useEffect)(() => {
    const r2 = new Lenis(Object.assign(Object.assign({}, b), !d2 && { wrapper: O.current, content: g.current }));
    return j(r2), () => {
      r2.destroy(), j(void 0);
    };
  }, [d2, JSON.stringify(b)]), (0, import_react.useEffect)(() => {
    if (k && m) return a.add((r2) => {
      null == k || k.raf(r2);
    }, h);
  }, [k, m, h]), (0, import_react.useEffect)(() => {
    if (d2 && k) return p.set({ lenis: k, addCallback: w, removeCallback: S }), () => p.set({});
  }, [d2, k, w, S]);
  const P = (0, import_react.useCallback)((...r2) => {
    for (let e = 0; e < C.current.length; e++) C.current[e].callback(...r2);
  }, []);
  return (0, import_react.useEffect)(() => (null == k || k.on("scroll", P), () => {
    null == k || k.off("scroll", P);
  }), [k, P]), (0, import_jsx_runtime.jsx)(f.Provider, { value: { lenis: k, addCallback: w, removeCallback: S }, children: d2 ? u2 : (0, import_jsx_runtime.jsx)("div", Object.assign({ ref: O, className: y }, v, { children: (0, import_jsx_runtime.jsx)("div", { ref: g, children: u2 }) })) });
});
export {
  d as Lenis,
  f as LenisContext,
  d as ReactLenis,
  d as default,
  useLenis
};
//# sourceMappingURL=lenis_react.js.map
